#+title: Notes on Emacs
#+author: Daniel

* Introduction to Babel

Tutorial from http://orgmode.org/worg/org-contrib/babel/intro.html

** Source Code Execution

#+begin_src hy
  (print "Hello, There!")
#+end_src

#+RESULTS:
: Hello, There!

#+begin_src sh
  echo "This file takes up `du -h emacs-org-babel-tutorial.org | sed 's/\([0-9k]*\)[ ]*emacs-org-babel-tutorial.org/\1/'`"
#+end_src

#+RESULTS:
: This file takes up 4.0K

#+begin_src R :colnames yes
  words <- tolower(scan("emacs-org-babel-tutorial.org", what="", na.strings=c("|",":")))
  t(sort(table(words[nchar(words) > 3]), decreasing=TRUE)[1:10])
#+end_src

#+RESULTS:
| #+begin_src | #+end_src | #+results: | date | plus | today's | :results | hello, | import | is") |
|-------------+-----------+------------+------+------+---------+----------+--------+--------+------|
|           5 |         5 |          4 |    3 |    3 |       3 |        2 |      2 |      2 |    2 |

*** Capturing the Results of Code Evaluation

#+begin_src python :results value
  import time
  print("Hello, today's date is %s" % time.ctime())
  print("Two plus two is")
  return 2 + 2
#+end_src

#+RESULTS:
: 4

#+begin_src python :results output
  import time
  print("Hello, today's date is %s" % time.ctime())
  print("Two plus two is")
  2 + 2
#+end_src

#+RESULTS:
: Hello, today's date is Sun Jun 26 16:04:36 2016
: Two plus two is

*** Session-based Evaluation

Have a look into /Emacs Speaks Statistics/

*** Arguments to Code Blocks

#+name: square
#+header: :var x = 0
#+begin_src python
  return x*x
#+end_src

#+call: square(x=6)

#+RESULTS:
: 36

#+tblname: fibonacci-inputs
| 1 | 2 | 3 | 4 |  5 |  6 |  7 |  8 |  9 | 10 |
| 2 | 4 | 6 | 8 | 10 | 12 | 14 | 16 | 18 | 20 |

#+name: fibonacci-seq
#+begin_src emacs-lisp :var fib-inputs=fibonacci-inputs
  (defun fibonacci (n)
    (if (or (= n 0) (= n 1))
        n
      (+ (fibonacci (- n 1))
         (fibonacci (- n 2)))))

  (mapcar (lambda (row)
            (mapcar #'fibonacci row))
          fib-inputs)
#+end_src

#+RESULTS: fibonacci-seq
| 1 | 1 | 2 |  3 |  5 |   8 |  13 |  21 |   34 |   55 |
| 1 | 3 | 8 | 21 | 55 | 144 | 377 | 987 | 2584 | 6765 |

*** In-line Code Blocks

In-line code can be call without header arguments (like so: src_sh{date}) or
with header arguments (like so: src_python[:results value]{return 10 + 10}).

*** Code Block Body Expansion

Preview: =C-c C-v v=, bound to =org-babel-expand-src-block=

#+tblname: data
| username | john-doe |
| password | abc123   |

#+begin_src emacs-lisp :var data=data
(setq my-special-username (first (first data)))
(setq my-special-password (first (second data)))
#+end_src

*** A Meta-programming Language for Org-mode

#+name: directories
#+begin_src sh :results replace
  cd ~ && du -sc * | grep -v total
#+end_src

#+RESULTS: directories
|   538604 | Desktop   |
| 77332656 | Documents |
|  1206668 | Mail      |
|        8 | News      |

#+name: directory-pie-chart
#+begin_src R :session R-pie-example :var dirs=directories
  pie(dirs[,1], labels = dirs[,2])
#+end_src

#+RESULTS: directory-pie-chart

Note: the syntax =#+name: directory-pie-chart(dirs=directories)= did not work.

*** Using Code Blocks in Org Tables

**** Example 1: Data Summaries Using R

#+name: tbl-example-data
#+begin_src R
  runif(n=5, min=0, max=1)
#+end_src

#+name: R-mean
#+begin_src R :var x=""
  colMeans(x)
#+end_src

#+tblname: summaries
|              mean |
|-------------------|
| 0.574235895462334 |
#+TBLFM: @2$1='(org-sbe "R-mean" (x "tbl-example-data()"))

**** Example 2: Babel Test Suite

/No notes/

** The Library of Babel

#+lob: square(x=6)

Does not do what I expected â€¦

** Literate Programming

#+name: hello-world-prefix
#+begin_src sh :exports none
  echo "/-----------------------------------------------------------\\"
#+end_src

#+name: hello-world-postfix
#+begin_src sh :exports none
  echo "\-----------------------------------------------------------/"
#+end_src

#+name: hello-world
#+begin_src sh :tangle hello.sh :exports none :noweb yes
  <<hello-world-prefix>>
  echo "|                       hello world                         |"
  <<hello-world-postfix>>
#+end_src

Tangling with =C-c C-v t=.

** Reproducible Research

* Emacs Calc Tutorials

By Andrew Hyatt, found here: https://github.com/ahyatt/emacs-calc-tutorials.

** LICENSE

#+BEGIN_EXAMPLE
                    GNU GENERAL PUBLIC LICENSE
                       Version 3, 29 June 2007

 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

                            Preamble

  The GNU General Public License is a free, copyleft license for
software and other kinds of works.

  The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

  To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

  Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

  For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

  Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users' freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

  Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

  The precise terms and conditions for copying, distribution and
modification follow.

                       TERMS AND CONDITIONS

  0. Definitions.

  "This License" refers to version 3 of the GNU General Public License.

  "Copyright" also means copyright-like laws that apply to other kinds of
works, such as semiconductor masks.

  "The Program" refers to any copyrightable work licensed under this
License.  Each licensee is addressed as "you".  "Licensees" and
"recipients" may be individuals or organizations.

  To "modify" a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of an
exact copy.  The resulting work is called a "modified version" of the
earlier work or a work "based on" the earlier work.

  A "covered work" means either the unmodified Program or a work based
on the Program.

  To "propagate" a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy.  Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.

  To "convey" a work means any kind of propagation that enables other
parties to make or receive copies.  Mere interaction with a user through
a computer network, with no transfer of a copy, is not conveying.

  An interactive user interface displays "Appropriate Legal Notices"
to the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License.  If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.

  1. Source Code.

  The "source code" for a work means the preferred form of the work
for making modifications to it.  "Object code" means any non-source
form of a work.

  A "Standard Interface" means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.

  The "System Libraries" of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form.  A
"Major Component", in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.

  The "Corresponding Source" for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities.  However, it does not include the work's
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work.  For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.

  The Corresponding Source need not include anything that users
can regenerate automatically from other parts of the Corresponding
Source.

  The Corresponding Source for a work in source code form is that
same work.

  2. Basic Permissions.

  All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met.  This License explicitly affirms your unlimited
permission to run the unmodified Program.  The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work.  This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.

  You may make, run and propagate covered works that you do not
convey, without conditions so long as your license otherwise remains
in force.  You may convey covered works to others for the sole purpose
of having them make modifications exclusively for you, or provide you
with facilities for running those works, provided that you comply with
the terms of this License in conveying all material for which you do
not control copyright.  Those thus making or running the covered works
for you must do so exclusively on your behalf, under your direction
and control, on terms that prohibit them from making any copies of
your copyrighted material outside their relationship with you.

  Conveying under any other circumstances is permitted solely under
the conditions stated below.  Sublicensing is not allowed; section 10
makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

  No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.

  When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such circumvention
is effected by exercising rights under this License with respect to
the covered work, and you disclaim any intention to limit operation or
modification of the work as a means of enforcing, against the work's
users, your or third parties' legal rights to forbid circumvention of
technological measures.

  4. Conveying Verbatim Copies.

  You may convey verbatim copies of the Program's source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.

  You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

  You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these conditions:

    a) The work must carry prominent notices stating that you modified
    it, and giving a relevant date.

    b) The work must carry prominent notices stating that it is
    released under this License and any conditions added under section
    7.  This requirement modifies the requirement in section 4 to
    "keep intact all notices".

    c) You must license the entire work, as a whole, under this
    License to anyone who comes into possession of a copy.  This
    License will therefore apply, along with any applicable section 7
    additional terms, to the whole of the work, and all its parts,
    regardless of how they are packaged.  This License gives no
    permission to license the work in any other way, but it does not
    invalidate such permission if you have separately received it.

    d) If the work has interactive user interfaces, each must display
    Appropriate Legal Notices; however, if the Program has interactive
    interfaces that do not display Appropriate Legal Notices, your
    work need not make them do so.

  A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
"aggregate" if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation's users
beyond what the individual works permit.  Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.

  6. Conveying Non-Source Forms.

  You may convey a covered work in object code form under the terms
of sections 4 and 5, provided that you also convey the
machine-readable Corresponding Source under the terms of this License,
in one of these ways:

    a) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by the
    Corresponding Source fixed on a durable physical medium
    customarily used for software interchange.

    b) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by a
    written offer, valid for at least three years and valid for as
    long as you offer spare parts or customer support for that product
    model, to give anyone who possesses the object code either (1) a
    copy of the Corresponding Source for all the software in the
    product that is covered by this License, on a durable physical
    medium customarily used for software interchange, for a price no
    more than your reasonable cost of physically performing this
    conveying of source, or (2) access to copy the
    Corresponding Source from a network server at no charge.

    c) Convey individual copies of the object code with a copy of the
    written offer to provide the Corresponding Source.  This
    alternative is allowed only occasionally and noncommercially, and
    only if you received the object code with such an offer, in accord
    with subsection 6b.

    d) Convey the object code by offering access from a designated
    place (gratis or for a charge), and offer equivalent access to the
    Corresponding Source in the same way through the same place at no
    further charge.  You need not require recipients to copy the
    Corresponding Source along with the object code.  If the place to
    copy the object code is a network server, the Corresponding Source
    may be on a different server (operated by you or a third party)
    that supports equivalent copying facilities, provided you maintain
    clear directions next to the object code saying where to find the
    Corresponding Source.  Regardless of what server hosts the
    Corresponding Source, you remain obligated to ensure that it is
    available for as long as needed to satisfy these requirements.

    e) Convey the object code using peer-to-peer transmission, provided
    you inform other peers where the object code and Corresponding
    Source of the work are being offered to the general public at no
    charge under subsection 6d.

  A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.

  A "User Product" is either (1) a "consumer product", which means any
tangible personal property which is normally used for personal, family,
or household purposes, or (2) anything designed or sold for incorporation
into a dwelling.  In determining whether a product is a consumer product,
doubtful cases shall be resolved in favor of coverage.  For a particular
product received by a particular user, "normally used" refers to a
typical or common use of that class of product, regardless of the status
of the particular user or of the way in which the particular user
actually uses, or expects or is expected to use, the product.  A product
is a consumer product regardless of whether the product has substantial
commercial, industrial or non-consumer uses, unless such uses represent
the only significant mode of use of the product.

  "Installation Information" for a User Product means any methods,
procedures, authorization keys, or other information required to install
and execute modified versions of a covered work in that User Product from
a modified version of its Corresponding Source.  The information must
suffice to ensure that the continued functioning of the modified object
code is in no case prevented or interfered with solely because
modification has been made.

  If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information.  But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).

  The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or updates
for a work that has been modified or installed by the recipient, or for
the User Product in which it has been modified or installed.  Access to a
network may be denied when the modification itself materially and
adversely affects the operation of the network or violates the rules and
protocols for communication across the network.

  Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.

  7. Additional Terms.

  "Additional permissions" are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law.  If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.

  When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it.  (Additional permissions may be written to require their own
removal in certain cases when you modify the work.)  You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.

  Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders of
that material) supplement the terms of this License with terms:

    a) Disclaiming warranty or limiting liability differently from the
    terms of sections 15 and 16 of this License; or

    b) Requiring preservation of specified reasonable legal notices or
    author attributions in that material or in the Appropriate Legal
    Notices displayed by works containing it; or

    c) Prohibiting misrepresentation of the origin of that material, or
    requiring that modified versions of such material be marked in
    reasonable ways as different from the original version; or

    d) Limiting the use for publicity purposes of names of licensors or
    authors of the material; or

    e) Declining to grant rights under trademark law for use of some
    trade names, trademarks, or service marks; or

    f) Requiring indemnification of licensors and authors of that
    material by anyone who conveys the material (or modified versions of
    it) with contractual assumptions of liability to the recipient, for
    any liability that these contractual assumptions directly impose on
    those licensors and authors.

  All other non-permissive additional terms are considered "further
restrictions" within the meaning of section 10.  If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term.  If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.

  If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.

  Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions;
the above requirements apply either way.

  8. Termination.

  You may not propagate or modify a covered work except as expressly
provided under this License.  Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).

  However, if you cease all violation of this License, then your
license from a particular copyright holder is reinstated (a)
provisionally, unless and until the copyright holder explicitly and
finally terminates your license, and (b) permanently, if the copyright
holder fails to notify you of the violation by some reasonable means
prior to 60 days after the cessation.

  Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

  Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.

  9. Acceptance Not Required for Having Copies.

  You are not required to accept this License in order to receive or
run a copy of the Program.  Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance.  However,
nothing other than this License grants you permission to propagate or
modify any covered work.  These actions infringe copyright if you do
not accept this License.  Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

  Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License.  You are not responsible
for enforcing compliance by third parties with this License.

  An "entity transaction" is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations.  If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party's predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.

  You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License.  For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.

  11. Patents.

  A "contributor" is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based.  The
work thus licensed is called the contributor's "contributor version".

  A contributor's "essential patent claims" are all patent claims
owned or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version.  For
purposes of this definition, "control" includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.

  Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor's essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.

  In the following three paragraphs, a "patent license" is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement).  To "grant" such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.

  If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients.  "Knowingly relying" means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient's use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.

  If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.

  A patent license is "discriminatory" if it does not include within
the scope of its coverage, prohibits the exercise of, or is
conditioned on the non-exercise of one or more of the rights that are
specifically granted under this License.  You may not convey a covered
work if you are a party to an arrangement with a third party that is
in the business of distributing software, under which you make payment
to the third party based on the extent of your activity of conveying
the work, and under which the third party grants, to any of the
parties who would receive the covered work from you, a discriminatory
patent license (a) in connection with copies of the covered work
conveyed by you (or copies made from those copies), or (b) primarily
for and in connection with specific products or compilations that
contain the covered work, unless you entered into that arrangement,
or that patent license was granted, prior to 28 March 2007.

  Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

  If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot convey a
covered work so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you may
not convey it at all.  For example, if you agree to terms that obligate you
to collect a royalty for further conveying from those to whom you convey
the Program, the only way you could satisfy both those terms and this
License would be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

  Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU Affero General Public License into a single
combined work, and to convey the resulting work.  The terms of this
License will continue to apply to the part which is the covered work,
but the special requirements of the GNU Affero General Public License,
section 13, concerning interaction through a network will apply to the
combination as such.

  14. Revised Versions of this License.

  The Free Software Foundation may publish revised and/or new versions of
the GNU General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

  Each version is given a distinguishing version number.  If the
Program specifies that a certain numbered version of the GNU General
Public License "or any later version" applies to it, you have the
option of following the terms and conditions either of that numbered
version or of any later version published by the Free Software
Foundation.  If the Program does not specify a version number of the
GNU General Public License, you may choose any version ever published
by the Free Software Foundation.

  If the Program specifies that a proxy can decide which future
versions of the GNU General Public License can be used, that proxy's
public statement of acceptance of a version permanently authorizes you
to choose that version for the Program.

  Later license versions may give you additional or different
permissions.  However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.

  15. Disclaimer of Warranty.

  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

  If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.

                     END OF TERMS AND CONDITIONS

            How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

Also add information on how to contact you by electronic and paper mail.

  If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

    <program>  Copyright (C) <year>  <name of author>
    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
    This is free software, and you are welcome to redistribute it
    under certain conditions; type `show c' for details.

The hypothetical commands `show w' and `show c' should show the appropriate
parts of the General Public License.  Of course, your program's commands
might be different; for a GUI interface, you would use an "about box".

  You should also get your employer (if you work as a programmer) or school,
if any, to sign a "copyright disclaimer" for the program, if necessary.
For more information on this, and how to apply and follow the GNU GPL, see
<https://www.gnu.org/licenses/>.

  The GNU General Public License does not permit incorporating your program
into proprietary programs.  If your program is a subroutine library, you
may consider it more useful to permit linking proprietary applications with
the library.  If this is what you want to do, use the GNU Lesser General
Public License instead of this License.  But first, please read
<https://www.gnu.org/licenses/why-not-lgpl.html>.

#+END_EXAMPLE

** README

#+BEGIN_EXAMPLE
This repository contains tutorials about emacs calc originally writen on the
Emacs community on Google+.

The best way to read is probably just to open the org files directly, which
Github will display correctly.

If anyone would like to correct anything, add any tutorials, or request
anything, the normal Github bug / request / or pull request process will work.

#+END_EXAMPLE

** Algebra

I think it's time to write about one of the amazing things that calc can do:
algebra!

Before we get into how to solve equations, I just want to write about on some
cool things you can do with the calc display.

Let's say you have a formula you want to work with =a + sqrt(b) =  5=. Let's enter
that into calc:

#+BEGIN_EXAMPLE
M-x calc
'a + sqrt(b) = 5  (' starts algebraic mode).

Result:
1:  a + sqrt(b) = 5
#+END_EXAMPLE

Well, that's not so surprising, that's what we put in. Kind of disappointing,
though. Is that it calc? We love your brains, but what about your looks? That's
important too!

#+BEGIN_EXAMPLE
d B  (turn on calc-big-language mode)

Result:
         ___
1:  a + V b  = 5
#+END_EXAMPLE

Hey, that's an ASCII square-root symbol. What other cool things can you do here?

#+BEGIN_EXAMPLE
a^2

Result:

     2
1:  a

3:4   (enter the fraction 3/4)

Result:

    3
1:  -
    4
#+END_EXAMPLE

Here's how to get back:
#+BEGIN_EXAMPLE
d N  (calc-normal-language)
#+END_EXAMPLE

And an alternative, in which all operators are explicitly represented as
functions:

#+BEGIN_EXAMPLE
1:  a + sqrt(b) = 5  (re-enter the formula)
d U  (calc-unformatted-language)

Result:
1:  eq(add(a, sqrt(b)), 5)
#+END_EXAMPLE

But, wait, did you think that's all? What if you wanted to enter that equation
in Mathematica?

#+BEGIN_EXAMPLE
d M  (calc-mathematica-language)

Result:

1:  a + Sqrt[b] == 5
#+END_EXAMPLE

Ooh!  Calc!  Do c++ next!

#+BEGIN_EXAMPLE
d C  (calc-c-language)

1:  a + sqrt(b) == 5
#+END_EXAMPLE

Latex!

#+BEGIN_EXAMPLE
d L  (calc-latex-language)

Result:

1:  a + \sqrt{b} = 5
#+END_EXAMPLE

I could keep going, but trust me, there's more. And you can even define your own
languages by constructing syntax tables, but I won't get into that now.

** Bit Manipulation

Quick! What bits are set on the number 925817? What, are you going to convert it
to binary and note positions of 1s? Ha! I laugh at such primitive techniques.

#+BEGIN_EXAMPLE
M-x calc
925817
b u  (unpack the bits into a vector)

Result
1:  [0, [3 .. 6], 13, [17 .. 19]]
#+END_EXAMPLE

How many bits is that?

#+BEGIN_EXAMPLE
v #  (count the number of items in a vector)

Result:
1:  9
#+END_EXAMPLE

This is convenient! So yes, calc has some nice functions for binary numbers. The
interesting thing about calc's binary number functions aren't just that you can
do bitwise operations such as AND and OR, but it has the notion of a word size
that it works with. Well, it'd have to do things like NOT.

Let's check it out.  First, we'll see what the number 925817 looks like in binary.

#+BEGIN_EXAMPLE
925817
d 2

Result:
1:  2#11100010000001111001
#+END_EXAMPLE

This is nice, but it'd be better to see the whole word.

#+BEGIN_EXAMPLE
d z  (Display leading zeroes)

Result:
1:  2#00000000000011100010000001111001
#+END_EXAMPLE

Ah, that's more like it. The word size by default is 32 bits, as you can see.
Or, wait, can you see? Hard to count. Let's verify it.

#+BEGIN_EXAMPLE
d 0  (go back to base-10 mode)
0  (we start with 0)
b n  (calculate the not)

Result:
1:  4294967295
#+END_EXAMPLE

Now we already know how to count the 1's...

#+BEGIN_EXAMPLE
b u v #

Reuslt:

1:  0000000032
#+END_EXAMPLE

Whoops, looks like we still have leading 0s.  But we've confirmed it, so let's just let it go for now.

Now, let's see what the number 925817 is if you reverse all the bits. I can't
take credit for this particular bit of cleverness, this technique comes straight
from calc's info pages.

#+BEGIN_EXAMPLE
d z  (get rid of leading 0s)
925817
b u  (unpack into a vector)
31 <tab> -  (tranform each bit position by subtracting it from 31, the tab just switches the items around on the stack)
b p  (repack the vector)

Result:
1:  2651090944
#+END_EXAMPLE

Woody Allen once praised New York by saying how he loves that you can go to
Chinatown and eat a crab in the middle of the night, but in reality what kind of
crazy person would need to do that? I feel the same way about all these
features. Will I really ever need to reverse the bits of a number? Not sure, but
I do love the way that calc has me covered for whatever I really want to do.

By the way, want to go to 64-bit mode?  Just change the word size.

#+BEGIN_EXAMPLE
b w 64  (change the word size to 64)
#+END_EXAMPLE

Now let's reverse the bits of 925817 again to see what we get. It'll be
amusingly huge!

#+BEGIN_EXAMPLE
925817
b u  (unpack into a vector)
63 <tab> -  (tranform each number by subtracting it from 31, the tab just switches the items around on the stack)
b p  (repack the vector)

Result:
1:  11386348903201767424
#+END_EXAMPLE

Ah, that's what it was. I was just about to give that same answer myself.

One more cool thing. If you give a negative word size, calc will interpret
binary number as 2's complement numbers. For example:

#+BEGIN_EXAMPLE
b w 32  (set the word size to 32)
2  (just to choose a simple number)
b n  (bitwise not)

Result:
1:  4294967293
#+END_EXAMPLE

And now with 2's complement!

#+BEGIN_EXAMPLE
b w -32  (set the word size to -32, in other words, a 2's complement version of 32 bit)
2
b n

Result:
1:  -3
#+END_EXAMPLE

Hope this helps you twiddle those bits in all the ways that make you happy.

** Calculus

Quick, integrate =2x + sin(y)=! Well, frankly, it's been so long since I've done
calculus by hand I can't remember anymore. Well, knowing calculus is good, but
knowing calc is even more useful!

#+BEGIN_EXAMPLE
M-x calc
'2x + sin(y)  (The single quote enters algebraic mode)
a i y  (Calculate the integral with respect to y)

Result
1:  2 x y - 180 cos(y) / pi
#+END_EXAMPLE

You can also integrate over specific regions by using C-u a i, whereupon it will
prompt you for the start and end point of the integration.

As the manual mentions, the results are often not as simplified as they could
be. Calc is impressive, but it isn't as sophisticated as Mathematica.

An example of some issues are if we just take the derivative of the integral we
just calculated. We should get back to our original formula.

#+BEGIN_EXAMPLE
a d y  (Calculate the derivative with respect to y)

Result:
1:  2 x + 3.14159265358 sin(y) / pi
#+END_EXAMPLE

Clearly this should be 2x + sin(y), but calc may have made an error.

OK, let's make calc do something cool so we can forget this unfortunate
incident. Hey, how about making a Taylor series of a function?

#+BEGIN_EXAMPLE
'2x + sin(y) (re-enter the formula)
a t y 6  (Calculate the Taylor series of a term, over y, for 6 terms)

Result:
1:  2 x + y - y^3 / 6 + y^5 / 120 - y^7 / 5040 + y^9 / 362880
#+END_EXAMPLE

This isn't a bad approximation, see [[https://www.google.com/search?q=y+-+y%5E3+%2F+6+%2B+y%5E5+%2F+120+-+y%5E7+%2F+5040+%2B+y%5E9+%2F+362880][Googleâ€™s answer]] for comparison.

So, yes, calc can do college-level math, even if the answers aren't perfectly
simplified. It's not Mathematica, but it is free and integrated into emacs, so
it's definitely nice to have.

** Date

Ever want to know how many seconds old David Hasselhoff is? calc can do many
things, but it doesn't know much about Hasselhoff, so first I do a query on
Google for [david hasselhoff]. I get a knowledge card on the right saying he was
born July 17, 1952. It doesn't give a time, so we'll just assume it was at
midnight.

#+BEGIN_EXAMPLE
M-x calc
t N (put the current time on the stack)
'<Jul 17, 1952> (press ' to enter algebraic mode, then you input the date).
- (subtract the two to get the number of days David has been alive)
24 (we're going to multiply by 24, the number of hours in a day)
60 (the number of minutes in an hour)
60 (the number of seconds in a minute)
*
*
*

Final result:
1:  1910255938.01
#+END_EXAMPLE

There you have it, he's... wait, how many seconds?  That's really hard to read.

Back into calc!

#+BEGIN_EXAMPLE
d g (toggle digit grouping)

The final final result:
1:  1,910,255,938.01
#+END_EXAMPLE

Ah, that's a 1.9 billion seconds.  Sweet!

** Financial.org

I recently chatted with emacspeak creator T.V. Raman, and told him I was
writing a series of short tutorials about calc. He is really a calc fanatic, and
told me a story in which he astounded a loan officer by calculating scheduled
loan payments with just a few keystrokes in calc. Raman is living proof that
calc is a useful tool for so many situations, and it always pays to have emacs
running. He also mentioned that he found the explanation in the calc tutorial
about the financial functions to be the clearest he's ever read.

So, yes, calc can do finance. Let's say that you were sitting in front of a loan
officer, and she told you that for your loan of $500,000, you need to pay in 30
installments with a 5% interest rate. How much do you need to pay each month?
Wait a second! Stop right there, loan officer! I have calc!

#+BEGIN_EXAMPLE
M-x calc
500000  (the amount of the loan)
30   (the number of payments)
'5%  (equivalent to typing 0.05)
b M  (calc-fin-pmt, computing the amount of periodic payments to amortize a loan)

Result:
1:  25,000
#+END_EXAMPLE

OK, but that's a bit obvious, since $25,000 is just 5% of $500,000. If the
number of payments was much smaller, we'd get a larger value. Let's take another
question: if you wanted to only pay $10,000 in each installment? How many
installments would it take to pay off the loan?

#+BEGIN_EXAMPLE
'5%
10000  (the payment we want to make)
500000  (the loan amount)
b #  (calc-fin-nper, calculate the number of installments needed)

Result
1:  nper(0.05, 10,000, 500,000)
#+END_EXAMPLE

What? Oh, I see, I also go the message: "Payment too small to cover interest
rate: 10000". Oh, right, 5% of $500,000 is already $25,000, so we'd never pay it
off at that rate. What if we payed $50,000 instead?

#+BEGIN_EXAMPLE
'5%
50000  (the payment we want to make)
500000  (the loan amount)
b #

Result:
1: 14.2066908
#+END_EXAMPLE

So, it would take just over 14 payments to pay off the loan.

OK, one more cool one: Let's say you meet an investment banker who gives you the
following deal. I've got a investment for you, she says. Just give me $100,000
and I'll give you $10,000 at the end of each year for the next 12 years.
Assuming the interest rate will stay at 3% for the next 12 years. Is it a good
deal?

Hey, what are you asking me for? I have no idea! Calc knows, though, because it
can tell you the break-even point for the cost of an investment that gives
periodic payments.

#+BEGIN_EXAMPLE
'3%  (the interest rate)
12  (the number of payments)
10000  (the payment you get each time)
b P  (calc-fin-pv, calculate the "present value" of the investment, the break-even point for the investment)

Result:
1:  99,540.0399357
#+END_EXAMPLE

In other words, the break-even point for the initial cost is $99,540. If the
investment costs more than this, it's no good at that assumed interest rate.
Better reject the deal. Trust calc more than any investment banker.

This is just a small sampling of some of the financial calculations that calc
can perform. The next time you are making an investment, fire up calc. You'll
not only have confidence in the deal, you may just amaze someone with the power
of emacs, just like T.V. Raman did.

** Fractional Arithmetic

This one is pretty short, but it's about one of my favorite features of calc:
the ability to handle fractions as fractions instead of rendering them as real
numbers.

Quick, what's =5/8 + 9/21=?

Um, ok... better start multiplying things... wait, let's just tell calc to do
it.

#+BEGIN_EXAMPLE
M-x calc
5:8  (this is how you enter a fraction)
9:21 
+

Result:
1:  59/56
#+END_EXAMPLE

So easy! If we want to convert it to a float you can do this: 

#+BEGIN_EXAMPLE
c f (convert to
float)

Result:

1:  1.05357142857*10.^0
#+END_EXAMPLE

And if you want it back as a fraction, then just do:

#+BEGIN_EXAMPLE
c F  (convert to fraction)

Result:

1:  59/56 
#+END_EXAMPLE

That's so awesome!

You could also enter fractions this way:

#+BEGIN_EXAMPLE
m f  (set fraction mode, integer division will result in fractions)
5
8
/

Result:

1:  5/8
#+END_EXAMPLE

Now you can live in the nice world of fractions as much as you like. It's a nice
world, full of pleasant to look at integers taking up little horizontal space

** HEX

OK, seems like there's interest in some quick calc tips. Here's today's:

How to convert decimal to hexidecimal. Let's say you want to convert number
12345 to hex.

#+BEGIN_EXAMPLE
M-x calc
d 6 (sets the number radix to 16, meaning all output will be in hex)
10#12345 (inputs the number 12345 in base 10)

The output reads:
1:  16#3039
#+END_EXAMPLE

The answer is therefore =0x3039=.

And then you can do a =d 0= to set the number radix back to normal, base 10.

Here's how to do the other way.  Let's convert =0xABCDEF= to base 10.

#+BEGIN_EXAMPLE
M-x calc
16#ABCDEF

The output reads:
1:  11259375
#+END_EXAMPLE

** More on Algebra

Jim is 42 years old. He has one brother, and their total age is 100. What is the
brother's age? OK, this isn't a very hard problem, but let's just introduce calc
algebra by solving it.

#+BEGIN_EXAMPLE
M-x calc
'42 + x = 100  (' to enter algebraic input)
a S x  (solve for x)

Result:
1:  x = 58
#+END_EXAMPLE

Let's make this harder. Jim and Dan's ages sum to 100. Jim is 5 years older than
Dan. How old are they?

#+BEGIN_EXAMPLE
'[j + d = 100, d + 5 = j]
a S j,d

Result:
1:  [j = 52.5, d = 47.5]
#+END_EXAMPLE

Nice!

And of course it can give you more than just numerical solutions:

#+BEGIN_EXAMPLE
'sin(x) + tan(y) = pi / 2
a S y  (solve for y)

Result:
1:  y = arctan(pi / 2 - sin(x))
#+END_EXAMPLE

Sometimes there are more than one solution.  For example:
#+BEGIN_EXAMPLE
'x^2 = 25
a S x

Result:
1:  x = 5
#+END_EXAMPLE

Wait, what happened to -5! That's a valid solution, why didn't calc tell us
about it? What's happening here is that calc is telling us about the first valid
thing it can find, which is basically how it operates. But you can always get
everything:

#+BEGIN_EXAMPLE
'x^2 = 25
a P x  (find the polynomial solutions)

Result:
1:  [5, -5]
#+END_EXAMPLE

Sometimes there aren't a finite number of results because you aren't dealing
with polynomials. You can just get a generalized solution:

#+BEGIN_EXAMPLE
'sin(x)^2 = 25
H a S x  (solve for x, giving the generalized solution)

Result:
1:  x = arcsin(5 s1) (-1)^n1 + 180 n1
#+END_EXAMPLE

This uses the calc notation =n1=, which you just means any integer. You can also
see another notation =s1= which means any sign. In this case =5 s1= means that that
number can be 5 or -5.

Looking at how awesome calc is, it's just a shame I never knew about it in high
school...

** Pi and Precision

This one's about  p  and  P  and mostly about pi.

First, let's pi it up:

#+BEGIN_EXAMPLE
M-x calc
P (this gives you pi)

Result:
1:  3.14159265359
#+END_EXAMPLE

Well, I guess that's a reasonable pi. But, c'mon, this is calc. Can't we get a
bit more digits? How about 100?

#+BEGIN_EXAMPLE
p 100 (sets precisions to 100)
P (need to ask calc again for pi, it doesn't recalculate)

Result:
1:  3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117068
#+END_EXAMPLE

Well, but actually evaluating it robs it of its never-ending charm. Let's just
use it as a variable. How about calculating the area of a circle with a 5 km
radius?

#+BEGIN_EXAMPLE
'5000 m
2
^
'pi (enter pi as a variable)
*

We get:
1:  25000000 m^2 pi
#+END_EXAMPLE

Yeah, sure thatâ€™s what I said I wanted, but Iâ€™ve changed my mind - now I want a number.

#+BEGIN_EXAMPLE
=

1:  78539816.3397448309615660845819875721049292349843776455243736148076954101571552249657008706335529267 m^2
#+END_EXAMPLE

Whoops, looked like I forgot to set the precision back to normal. And I can't
read this. Let's make it a bit nicer.

#+BEGIN_EXAMPLE
Control-_ (normal emacs undo)
p 7
d g (turn digit grouping on)
=

Result:
1:  7.853983e7 m^2
#+END_EXAMPLE

Oh, that's because I didn't have enough precision to render it without resorting
to scientific notation. Let's just bump the precision up again.

#+BEGIN_EXAMPLE
Control-_ (undo, since we have to redo the pi conversion with more precision)
p 10
=

Result:
1:  78,539,816.35 m^2
#+END_EXAMPLE

Ah, that's better.

** Random

I use calc whenever I need a random number. The interface is easy and the random
numbers are (supposedly) high quality.

So, let's start with something simple: A random number between 0 and 100:

#+BEGIN_EXAMPLE
M-x calc
100 (the upper bound, all values will be between 0 and this)
k r (creates a random number between 0 and the number on the stack)

Result:
1:  66  (of course, yours will be different)
#+END_EXAMPLE

I want another one!
#+BEGIN_EXAMPLE
k a (creates another number with the same upper bound as the last)
#+END_EXAMPLE

Now that Iâ€™ve had a taste of that sweet sweet randomness, I want a vector of 50!

#+BEGIN_EXAMPLE
100 (the upper bound, again)
50 (the number to generate)
k h (generate a vector of 50 random numbers between 0 and 100)

1:  [60, 72, 61, 74, 77, 97, 10, 90, 8, 29, 82, 81, 51, 58, 7, 88, 99, 1, 37, 89, 93, 84, 52, 94, 2, 35, 5, 48, 87, 47, 14, 6, 79, 18, 67, 76, 70, 9, 43, 65, 69, 23, 55, 11, 53, 78, 50, 30, 13, 42]
#+END_EXAMPLE

OK, that's nice.  But how about a number between 0 and 1?

#+BEGIN_EXAMPLE
1.0
k r 

Result:
1:  0.636988102539
#+END_EXAMPLE

OK, how about number between -50 and 50? For that we need to use what calc calls
an interval form:

#+BEGIN_EXAMPLE
[ (Starts interval form)
50 (You can't just type -50 in calc)
n (negate, givint -50)
.. (the middle part of the interval form)
50] (closing the interval form)
#+END_EXAMPLE

What you see now in calc is:
#+BEGIN_EXAMPLE
[-50 .. 50]
#+END_EXAMPLE
And you could have just typed it in with:
#+BEGIN_EXAMPLE
'[-50 .. 50]
#+END_EXAMPLE
which would be a lot easier, really.

#+BEGIN_EXAMPLE
k r
#+END_EXAMPLE
This produces a random number from the bounds of the interval, in this case both
-50 and 50 are possible, if you wanted them to be exlusive bounds, you'd use the
form =(-50 .. 50)=.

Finally, you can re-arrange a list: 
#+BEGIN_EXAMPLE
'[1 2 3 4] (our starting vector) 
-1 (signals to use the vector above, could also be the size of the vector) 
k h

Result:
1:  [3, 1, 4, 2]
#+END_EXAMPLE

But =k a= will not give you more variants, unfortunately.

** Strings

Did you know you could work with strings in calc? For an example, let's find out
what "Hello world" is in binary:

#+BEGIN_EXAMPLE
M-x calc
d 2 (change the to binary mode)
"Hello world (Enter the string "Hello world" which turns into a vector of numbers)

Result:
1:  [2#1001000, 2#1100101, 2#1101100, 2#1101100, 2#1101111, 2#100000, 2#1110111, 2#1101111, 2#1110010, 2#1101100, 2#1100100]
#+END_EXAMPLE

And similarly, we can convert back. If someone gave you the binary number:
=01001000011011110110110001100001= and asked what the string was, I'd have no
idea... but calc knows:

#+BEGIN_EXAMPLE
d " (changes to string mode)
C-x b scratch   (whaaa, leave calc?)
01001000011011110110110001100001  (enter the number we're parsing)
C-a  (go to the start of the line)
C-x (  (start a macro)
2# (prefix the number with a binary indicator)
C-u 8 C-f  (Jump forward 8 characters)
<space>  (insert a space to separate the numbers)
C-x )  (end the macro)
C-x e  (repeat the macro)
e e  (repeat twice twice more)
C-<space>  (set mark)
C-a  (goto beginning of line)
C-x <asterisk> g  (copy region into calc)

Result:

1:  "Hola"
#+END_EXAMPLE

And there you have it! Maybe there is an easier way to convert from the giant
binary number to a vector of bytes, but I don't know it yet. 

** Time

Hey, what's the time? It's time to get ill! No, actually I meant the time in
seconds since the epoch. Yesterday I went over doing math with time, which is
fun but not something I use everyday. Much more useful is converting to and from
Unix timestamps.

Let's start by getting the time now in seconds since the epoch:

#+BEGIN_EXAMPLE
M-x calc
t N (get the time now)
t U (convert the time to seconds since the epoch)

Result:
1:  1359424746
#+END_EXAMPLE

Oh, and you want to insert that into your last used buffer?

#+BEGIN_EXAMPLE
y (that doesn't mean "yes", that means yank into the last buffer)
#+END_EXAMPLE

Done!  Just to be complete, let's convert another date we have to input:

#+BEGIN_EXAMPLE
'<12:00pm Jul 4, 1776> (single quote to enter algebraic mode, then the date)
t U (converts the time to seconds since the epoch)
#+END_EXAMPLE

But wait, what will happen?  This is considerably before the epoch.

#+BEGIN_EXAMPLE
Result:
1:  -6106003200
#+END_EXAMPLE

Oh calc, you never let me down.

Let's do the other way.  Remember the Billenium?

#+BEGIN_EXAMPLE
1e9
t U (converts the time in seconds since the epoch to text)

Result:
1:  <9:46:40pm Sat Sep 8, 2001>
#+END_EXAMPLE

Wow, I never realized how close the Billenium was to September 11th.  Kind of spooky...

** Unit Conversion

You load 16 tons, and what do you get?  I mean, in kilograms.

#+BEGIN_EXAMPLE
M-x calc
' 16 tons (' to enter algebraic mode, so you can type out the units)
u c kg (u c for "unit convert", and kg being the target unit).

Result:
1:  14514.95584 kg
#+END_EXAMPLE

Calc treats units as special.  If you added something, such as:

#+BEGIN_EXAMPLE
3
+

Result:
1:  14514.95584 kg + 3
#+END_EXAMPLE

But you can remove the units from the above using:
#+BEGIN_EXAMPLE
u r (remove units)

Result:
1:  14517.95584
#+END_EXAMPLE

OK, that's all well and good. But I've always wondered how much is Grandpa
Simpson's gas mileage when he said "My car gets 40 rods to the hogshead and
that's the way I likes it."

For that, we need to define the units. Calc knows about a lot of units, but
maybe not the rod and hogshead. In fact, in the calc info pages, defining what a
"rod" is the example for how to define your own units. Let's get started!

#+BEGIN_EXAMPLE
'16 ft (The equivalent to one rod)
u d rod Rod (defines a new unit rod, with optional description "Rod")
#+END_EXAMPLE
Now a hogshead is a unit of measurement that varies by what liquid it contains.
I don't know what the unit is for gasoline, but let's use sherry as a
substitute, in which a hogshead is 245 liters.

#+BEGIN_EXAMPLE
'245 liters
u d hogshead (don't bother with a description this time)
'40 rod
'1 hogshead
/
#+END_EXAMPLE
Wait, what units should we be using?
#+BEGIN_EXAMPLE
u v (show the units table, a handy table of all units)
u c mi/gal (the units come from the unit table)

Result:
1:  1.87280731429e-3 mi / gal
#+END_EXAMPLE

But wait, we can do better. Why upgrade this measure to something that isn't
even standard? Miles per gallon is just a bit better than rods per hogshead (in
fact, that was what the original joke was about).

#+BEGIN_EXAMPLE
u c si (convert everything to scientific units)

Result:
1:  796.212244896 / m^2
#+END_EXAMPLE

Not that I understand this number, but at least in miles per gallon, I can see
that that's not such great fuel economy, but what you do expect from Grandpa?

OK, one more cool thing, then I'm out of here. Calc can split up numbers into
multiple units. Here's 42 inches in feet and inches:

#+BEGIN_EXAMPLE
'42 in
u c ft+in (Convert to a mixture of feet and inches)

Result:
1:  3 ft + 6. in
#+END_EXAMPLE

Calc, you're sooo coool!

* Random Notes
** How to paste then copy                                              :NOTE:
:PROPERTIES:
:CREATED: [2018-08-11 Sat 21:47]
:END:
:LOGBOOK:
CLOCK: [2018-08-11 Sat 21:47]--[2018-08-11 Sat 21:48] =>  0:01
:END:

Question: how to set a mark such that all subsequent copy operations move their
text to that exact mark.

Answer: use ~cua-selection-mode~!  See
https://www.reddit.com/r/emacs/comments/8ekz0u/how_to_pastethencopy/.

/Update/: turns out it doesnâ€™t work so well, disabled it again.
** Tramp and Telnet over non-standard ports                            :NOTE:
:PROPERTIES:
:CREATED: [2018-12-29 Sat 15:58]
:END:

Syntax: ~/telnet:HOST#PORT:~, works also with other protocols.

** Magit Walkthrough                                                   :NOTE:
:PROPERTIES:
:CREATED: [2018-08-11 Sat 21:05]
:END:

https://emacsair.me/2017/09/01/magit-walk-through/
** Fractals in Emacs                                                   :NOTE:
:PROPERTIES:
:CREATED: [2018-08-04 Sat 13:01]
:END:
:LOGBOOK:
CLOCK: [2018-08-04 Sat 13:01]--[2018-08-04 Sat 13:03] =>  0:02
:END:

From https://nullprogram.com/blog/2012/09/14/

#+begin_src emacs-lisp
(defun sierpinski (s)
  (pop-to-buffer (get-buffer-create "*sierpinski*"))
  (fundamental-mode) (erase-buffer)
  (labels ((fill-p (x y)
                   (cond ((or (zerop x) (zerop y)) "0")
                         ((and (= 1 (mod x 3)) (= 1 (mod y 3))) "1")
                         (t (fill-p (/ x 3) (/ y 3))))))
    (insert (format "P1\n%d %d\n" s s))
    (dotimes (y s) (dotimes (x s) (insert (fill-p x y) " "))))
  (image-mode))

(defun mandelbrot ()
  (pop-to-buffer (get-buffer-create "*mandelbrot*"))
  (let ((w 400) (h 300) (d 32))
    (fundamental-mode) (erase-buffer)
    (set-buffer-multibyte nil)
    (insert (format "P6\n%d %d\n255\n" w h))
    (dotimes (y h)
      (dotimes (x w)
        (let* ((cx (* 1.5 (/ (- x (/ w 1.45)) w 0.45)))
               (cy (* 1.5 (/ (- y (/ h 2.0)) h 0.5)))
               (zr 0) (zi 0)
               (v (dotimes (i d d)
                    (if (> (+ (* zr zr) (* zi zi)) 4) (return i)
                      (psetq zr (+ (* zr zr) (- (* zi zi)) cx)
                             zi (+ (* (* zr zi) 2) cy))))))
          (insert-char (floor (* 256 (/ v 1.0 d))) 3))))
    (image-mode)))
#+end_src
